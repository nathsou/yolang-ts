#![noImplicitFoundationsImport]

#meta(addInt)
pub fun `+`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

#meta(addFloat)
pub fun `+`<T in [f32, f64]>(a: T, b: T): T

#meta(subInt)
pub fun `-`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

#meta(subFloat)
pub fun `-`<T in [f32, f64]>(a: T, b: T): T

#meta(negInt)
pub fun `-`<T in [i8, i16, i32, i64]>(n: T): T

#meta(negFloat)
pub fun `-`<T in [f32, f64]>(n: T): T

pub fun not(q: bool): bool {
  if q { false } else { true }
}

#meta(mulInt)
pub fun `*`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

#meta(mulFloat)
pub fun `*`<T in [f32, f64]>(a: T, b: T): T

#meta(signedDiv)
pub fun `/`<T in [i8, i16, i32, i64]>(a: T, b: T): T

#meta(unsignedDiv)
pub fun `/`<T in [u8, u16, u32, u64]>(a: T, b: T): T

#meta(divFloat)
pub fun `/`<T in [f32, f64]>(a: T, b: T): T

#meta(mod)
pub fun mod<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

pub fun xor(a: bool, b: bool): bool {
  (a or b) and (a nand b)
}

pub fun xnor(a: bool, b: bool): bool {
  (a nor b) or (a and b)
}

// bitwise not
#meta
pub fun `~`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(q: T): T

// bitwise and
#meta
pub fun `&`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

// bitwise or
#meta
pub fun `|`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

// bitwise xor
#meta
pub fun `^`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

// left shift
#meta
pub fun `<<`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): T

// right shift
#meta(arithmeticShiftRight)
pub fun `>>`<T in [i8, i16, i32, i64]>(a: T, b: T): T

#meta(logicalShiftRight)
pub fun `>>`<T in [u8, u16, u32, u64]>(a: T, b: T): T

#meta(signedLss)
pub fun `<`<T in [i8, i16, i32, i64]>(a: T, b: T): bool

#meta(unsignedLss)
pub fun `<`<T in [u8, u16, u32, u64]>(a: T, b: T): bool

#meta(lssFloat)
pub fun `<`<T in [f32, f64]>(a: T, b: T): bool

#meta(signedLeq)
pub fun `<=`<T in [i8, i16, i32, i64]>(a: T, b: T): bool

#meta(unsignedLeq)
pub fun `<=`<T in [u8, u16, u32, u64]>(a: T, b: T): bool

#meta(leqFloat)
pub fun `<=`<T in [f32, f64]>(a: T, b: T): bool

#meta(signedGtr)
pub fun `>`<T in [i8, i16, i32, i64]>(a: T, b: T): bool

#meta(unsignedGtr)
pub fun `>`<T in [u8, u16, u32, u64]>(a: T, b: T): bool

#meta(gtrFloat)
pub fun `>`<T in [f32, f64]>(a: T, b: T): bool

#meta(signedGeq)
pub fun `>=`<T in [i8, i16, i32, i64]>(a: T, b: T): bool

#meta(unsignedGeq)
pub fun `>=`<T in [u8, u16, u32, u64]>(a: T, b: T): bool

#meta(geqFloat)
pub fun `>=`<T in [f32, f64]>(a: T, b: T): bool

#meta(eqInt)
pub fun `==`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): bool

#meta(eqFloat)
pub fun `==`<T in [f32, f64]>(a: T, b: T): bool

#meta(neqInt)
pub fun `!=`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, b: T): bool

#meta(neqFloat)
pub fun `!=`<T in [f32, f64]>(a: T, b: T): bool

#meta(u8FromInt)
pub fun u8<T in [i8, i16, i32, i64]>(n: T): u8

#meta(u8FromUInt)
pub fun u8<T in [u8, u16, u32, u64]>(n: T): u8

#meta(toF64)
pub fun f64<T in [f32, f64]>(x: T): f64

#meta(toF32)
pub fun f32<T in [f32, f64]>(x: T): f32

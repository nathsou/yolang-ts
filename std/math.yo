#![noImplicitFoundationsImport]

import std/ops [`==`, `*`, `/`, `-`, `&`, `<`]

pub fun even<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(n: T): bool {
  n & 1 == 0
}

pub fun odd<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(n: T): bool {
  n & 1 == 1
}

// exponentiation
pub fun `**`<T in [i8, u8, i16, u16, i32, u32, i64, u64]>(a: T, n: T): T {
  if n == 0 {
    1
  } else {
    if n.even() {
      (a * a) ** (n / 2)
    } else {
      a * (a * a) ** ((n - 1) / 2)
    }
  }
}

#extern(powf)
pub fun `**`(a: f32, p: f32): f32

#extern(pow)
pub fun `**`(a: f64, p: f64): f64

#extern(sqrt)
pub fun sqrt(x: f64): f64

#extern(sqrtf)
pub fun sqrt(x: f32): f32

#extern(cbrt)
pub fun cbrt(x: f64): f64

#extern(cbrtf)
pub fun cbrt(x: f32): f32

#extern(cos)
pub fun cos(a: f64): f64

#extern(cosf)
pub fun cos(a: f32): f32

#extern(acos)
pub fun acos(a: f64): f64

#extern(acosf)
pub fun acos(a: f32): f32

#extern(cosh)
pub fun cosh(a: f64): f64

#extern(coshf)
pub fun cosh(a: f32): f32

#extern(sin)
pub fun sin(a: f64): f64

#extern(sinf)
pub fun sin(a: f32): f32

#extern(asin)
pub fun asin(a: f64): f64

#extern(asinf)
pub fun asin(a: f32): f32

#extern(sinh)
pub fun sinh(a: f64): f64

#extern(sinhf)
pub fun sinh(a: f32): f32

#extern(tan)
pub fun tan(a: f64): f64

#extern(tanf)
pub fun tan(a: f32): f32

#extern(tanh)
pub fun tanh(a: f64): f64

#extern(tanhf)
pub fun tanh(a: f32): f32

#extern(atan)
pub fun atan(a: f64): f64

#extern(atanf)
pub fun atan(a: f32): f32

#extern(atan2)
pub fun atan2(y: f64, x: f64): f64

#extern(atan2f)
pub fun atan2(y: f32, x: f32): f32

pub fun abs<T in [i8, i16, i32, i64]>(x: T): T {
  if x < 0 { -x } else { x }
}

pub fun abs<T in [u8, u16, u32, u64]>(x: T): T {
  x
}

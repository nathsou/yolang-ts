import { DataType, match } from "itsamatch";
import { Locals } from "./sections";
import { BlockType, Byte, FuncIdx, GlobalIdx, LabelIdx, LocalIdx, ValueType, Vec } from "./types";
import { sleb128 } from "./utils";

export type Inst = DataType<{
  'unreachable': {},
  'nop': {},
  'i32.const': { n: number },
  'i64.const': { n: number },
  'f32.const': { x: number },
  'f64.const': { x: number },
  'if': { returnTy: BlockType },
  'block': { returnTy: BlockType },
  'loop': { returnTy: BlockType },
  'br': { label: LabelIdx },
  'br_if': { label: LabelIdx },
  'else': {},
  'end': {},
  'return': {},
  'call': { func: FuncIdx },
  'drop': {},
  'local.get': { local: LocalIdx },
  'local.set': { local: LocalIdx },
  'local.tee': { local: LocalIdx },
  'global.get': { global: GlobalIdx },
  'global.set': { global: GlobalIdx },
  'i32.add': {},
  'i32.sub': {},
  'i32.mul': {},
  'i32.div_s': {},
  'i32.div_u': {},
  'i32.rem_s': {},
  'i32.rem_u': {},
  'i32.and': {},
  'i32.or': {},
  'i32.xor': {},
  'i32.shl': {},
  'i32.shr_s': {},
  'i32.shr_u': {},
  'i32.rotl': {},
  'i32.rotr': {},
  'i32.eqz': {},
  'i32.eq': {},
  'i32.ne': {},
  'i32.lt_s': {},
  'i32.lt_u': {},
  'i32.le_s': {},
  'i32.le_u': {},
  'i32.gt_s': {},
  'i32.gt_u': {},
  'i32.ge_s': {},
  'i32.ge_u': {},
}>;

export const Inst = {
  unreachable: (): Inst => ({ variant: 'unreachable' }),
  nop: (): Inst => ({ variant: 'nop' }),
  i32: {
    const: (n: number): Inst => ({ variant: 'i32.const', n }),
    add: (): Inst => ({ variant: 'i32.add' }),
    sub: (): Inst => ({ variant: 'i32.sub' }),
    mul: (): Inst => ({ variant: 'i32.mul' }),
    div_s: (): Inst => ({ variant: 'i32.div_s' }),
    div_u: (): Inst => ({ variant: 'i32.div_u' }),
    rem_s: (): Inst => ({ variant: 'i32.rem_s' }),
    rem_u: (): Inst => ({ variant: 'i32.rem_u' }),
    and: (): Inst => ({ variant: 'i32.and' }),
    or: (): Inst => ({ variant: 'i32.or' }),
    xor: (): Inst => ({ variant: 'i32.xor' }),
    shl: (): Inst => ({ variant: 'i32.shl' }),
    shr_s: (): Inst => ({ variant: 'i32.shr_s' }),
    shr_u: (): Inst => ({ variant: 'i32.shr_u' }),
    rotl: (): Inst => ({ variant: 'i32.rotl' }),
    rotr: (): Inst => ({ variant: 'i32.rotr' }),
    eqz: (): Inst => ({ variant: 'i32.eqz' }),
    eq: (): Inst => ({ variant: 'i32.eq' }),
    ne: (): Inst => ({ variant: 'i32.ne' }),
    lt_s: (): Inst => ({ variant: 'i32.lt_s' }),
    lt_u: (): Inst => ({ variant: 'i32.lt_u' }),
    le_s: (): Inst => ({ variant: 'i32.le_s' }),
    le_u: (): Inst => ({ variant: 'i32.le_u' }),
    gt_s: (): Inst => ({ variant: 'i32.gt_s' }),
    gt_u: (): Inst => ({ variant: 'i32.gt_u' }),
    ge_s: (): Inst => ({ variant: 'i32.ge_s' }),
    ge_u: (): Inst => ({ variant: 'i32.ge_u' }),
  },
  i64: {
    const: (n: number): Inst => ({ variant: 'i64.const', n }),
  },
  f32: {
    const: (x: number): Inst => ({ variant: 'f32.const', x }),
  },
  f64: {
    const: (x: number): Inst => ({ variant: 'f64.const', x }),
  },
  if: (returnTy: BlockType): Inst => ({ variant: 'if', returnTy }),
  block: (returnTy: BlockType): Inst => ({ variant: 'block', returnTy }),
  loop: (returnTy: BlockType): Inst => ({ variant: 'loop', returnTy }),
  br: (label: LabelIdx): Inst => ({ variant: 'br', label }),
  br_if: (label: LabelIdx): Inst => ({ variant: 'br_if', label }),
  else: (): Inst => ({ variant: 'else' }),
  end: (): Inst => ({ variant: 'end' }),
  return: (): Inst => ({ variant: 'return' }),
  call: (func: FuncIdx): Inst => ({ variant: 'call', func }),
  drop: (): Inst => ({ variant: 'drop' }),
  local: {
    get: (local: LocalIdx): Inst => ({ variant: 'local.get', local }),
    set: (local: LocalIdx): Inst => ({ variant: 'local.set', local }),
    tee: (local: LocalIdx): Inst => ({ variant: 'local.tee', local }),
  },
  global: {
    get: (global: GlobalIdx): Inst => ({ variant: 'global.get', global }),
    set: (global: GlobalIdx): Inst => ({ variant: 'global.set', global }),
  },
  encode: (inst: Inst): Byte[] => match(inst, {
    'unreachable': () => [0x00],
    'nop': () => [0x01],
    'block': ({ returnTy }) => [0x02, ...BlockType.encode(returnTy)],
    'loop': ({ returnTy }) => [0x03, ...BlockType.encode(returnTy)],
    'if': ({ returnTy }) => [0x04, ...BlockType.encode(returnTy)],
    'else': () => [0x05],
    'end': () => [0x0b],
    'br': ({ label }) => [0x0c, ...LabelIdx.encode(label)],
    'br_if': ({ label }) => [0x0d, ...LabelIdx.encode(label)],
    'return': () => [0x0f],
    'call': ({ func }) => [0x10, ...FuncIdx.encode(func)],
    'drop': () => [0x1a],
    'local.get': ({ local }) => [0x20, ...LocalIdx.encode(local)],
    'local.set': ({ local }) => [0x21, ...LocalIdx.encode(local)],
    'local.tee': ({ local }) => [0x22, ...LocalIdx.encode(local)],
    'global.get': ({ global }) => [0x23, ...GlobalIdx.encode(global)],
    'global.set': ({ global }) => [0x24, ...GlobalIdx.encode(global)],
    'i32.const': ({ n }) => [0x41, ...Const.i32.encode(n)],
    'i64.const': ({ n }) => [0x42, ...Const.i64.encode(n)],
    'f32.const': ({ x }) => [0x43, ...Const.f32.encode(x)],
    'f64.const': ({ x }) => [0x44, ...Const.f64.encode(x)],
    'i32.eqz': () => [0x45],
    'i32.eq': () => [0x46],
    'i32.ne': () => [0x47],
    'i32.lt_s': () => [0x48],
    'i32.lt_u': () => [0x49],
    'i32.gt_s': () => [0x4a],
    'i32.gt_u': () => [0x4b],
    'i32.le_s': () => [0x4c],
    'i32.le_u': () => [0x4d],
    'i32.ge_s': () => [0x4e],
    'i32.ge_u': () => [0x4f],
    'i32.add': () => [0x6a],
    'i32.sub': () => [0x6b],
    'i32.mul': () => [0x6c],
    'i32.div_s': () => [0x6d],
    'i32.div_u': () => [0x6e],
    'i32.rem_s': () => [0x6f],
    'i32.rem_u': () => [0x70],
    'i32.and': () => [0x71],
    'i32.or': () => [0x72],
    'i32.xor': () => [0x73],
    'i32.shl': () => [0x74],
    'i32.shr_s': () => [0x75],
    'i32.shr_u': () => [0x76],
    'i32.rotl': () => [0x77],
    'i32.rotr': () => [0x78],
  }),
  encodeMany: (insts: Inst[]): Byte[] => insts.flatMap(Inst.encode),
  show: (inst: Inst, locals: Locals, funcNames: string[]): string => match(inst, {
    'i32.const': ({ n }) => `i32.const ${n}`,
    'i64.const': ({ n }) => `i64.const ${n}`,
    'f32.const': ({ x }) => `f32.const ${x}`,
    'f64.const': ({ x }) => `f64.const ${x}`,
    'local.get': ({ local }) => `local.get ${Locals.get(locals, local)}`,
    'local.set': ({ local }) => `local.set ${Locals.get(locals, local)}`,
    'local.tee': ({ local }) => `local.tee ${Locals.get(locals, local)}`,
    'global.get': ({ global }) => `global.get ${global}`,
    'global.set': ({ global }) => `global.set ${global}`,
    call: ({ func }) => `call ${funcNames[func]}`,
    br: ({ label }) => `br ${label}`,
    br_if: ({ label }) => `br_if ${label}`,
    _: () => inst.variant,
  }),
  showRaw: (inst: Inst): string => match(inst, {
    'i32.const': ({ n }) => `i32.const ${n}`,
    'i64.const': ({ n }) => `i64.const ${n}`,
    'f32.const': ({ x }) => `f32.const ${x}`,
    'f64.const': ({ x }) => `f64.const ${x}`,
    'local.get': ({ local }) => `local.get ${local}`,
    'local.set': ({ local }) => `local.set ${local}`,
    'local.tee': ({ local }) => `local.tee ${local}`,
    'global.get': ({ global }) => `global.get ${global}`,
    'global.set': ({ global }) => `global.set ${global}`,
    call: ({ func }) => `call ${func}`,
    br: ({ label }) => `br ${label}`,
    br_if: ({ label }) => `br_if ${label}`,
    _: () => inst.variant,
  }),
  identationDelta: (inst: Inst): { before: number, after: number } => match(inst, {
    if: () => ({ before: 0, after: 1 }),
    block: () => ({ before: 0, after: 1 }),
    loop: () => ({ before: 0, after: 1 }),
    else: () => ({ before: -1, after: 1 }),
    end: () => ({ before: -1, after: 0 }),
    _: () => ({ before: 0, after: 0 }),
  }),
  type: (inst: Inst): ({ consumes: ValueType[], outputs: ValueType[] }) => match(inst, {
    'i32.const': () => ({ consumes: [], outputs: [ValueType.i32] }),
    'i64.const': () => ({ consumes: [], outputs: [ValueType.i64] }),
    'f32.const': () => ({ consumes: [], outputs: [ValueType.f32] }),
    'f64.const': () => ({ consumes: [], outputs: [ValueType.f64] }),
    'i32.add': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.sub': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.mul': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.div_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.div_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.rem_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.rem_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.and': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.or': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.xor': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.shl': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.shr_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.shr_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.rotl': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.rotr': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.eqz': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.eq': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.ne': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.lt_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.lt_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.le_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.le_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.gt_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.gt_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.ge_s': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    'i32.ge_u': () => ({ consumes: [ValueType.i32, ValueType.i32], outputs: [ValueType.i32] }),
    _: () => ({ consumes: [], outputs: [] }),
  }),
};

export const Const = {
  i32: { encode: (n: number): Vec => sleb128(n) },
  i64: { encode: (n: number): Vec => sleb128(n) },
  f32: {
    encode: (x: number): Vec => {
      const view = new DataView(new ArrayBuffer(4));
      view.setFloat32(0, x, true);

      return [
        view.getUint8(0),
        view.getUint8(1),
        view.getUint8(2),
        view.getUint8(3),
      ];
    },
  },
  f64: {
    encode: (x: number): Vec => {
      const view = new DataView(new ArrayBuffer(8));
      view.setFloat64(0, x, true);

      return [
        view.getUint8(0),
        view.getUint8(1),
        view.getUint8(2),
        view.getUint8(3),
        view.getUint8(4),
        view.getUint8(5),
        view.getUint8(6),
        view.getUint8(7),
      ];
    },
  },
};
import std/arrays
import std/ops

fun get(a: i32[], index: u32): i32 {
  a.data.getUnchecked(index)
}

#extern
fun putchar(char: u8): u32

#meta(u8_from_int)
fun u8(n: i32): u8

fun log(str: u8[]) {
  mut index = 0u32
  while index < str.len {
    putchar(str.data.getUnchecked(index))
    index += 1u32
  }

  putchar(10u8) // newline
}

fun log(b: bool) {
  log(if b {
    [116u8, 114u8, 117u8, 101u8]
  } else {
    [102u8, 97u8, 108u8, 115u8, 101u8]
  })
}

fun containsAux(a: i32[], elem: i32, index: u32): bool {
  if index == a.len {
    false
  } else if a.get(index) == elem {
    true
  } else {
    containsAux(a, elem, index + 1u32)
  }
}

fun contains(a: i32[], elem: i32): bool {
  containsAux(a, elem, 0u32)
}

fun main() {
  log([
    72u8, 101u8, 108u8, 108u8, 111u8, 32u8,
    89u8, 111u8, 108u8, 97u8, 110u8, 103u8,
    33u8, 32u8, 240u8, 159u8, 152u8, 129u8,
  ])

  let primes = [2, 3, 5, 7, 11, 13, 17, 23]
  log(primes.contains(23))
}


#meta(addI32)
fun +(a: i32, b: i32): i32

#meta(addU32)
fun +(a: u32, b: u32): u32

#meta(addI64)
fun +(a: i64, b: i64): i64

#meta(addU64)
fun +(a: u64, b: u64): u64

#meta(subI32)
fun -(a: i32, b: i32): i32

#meta(subU32)
fun -(a: u32, b: u32): u32

#meta(subI64)
fun -(a: i64, b: i64): i64

#meta(subU64)
fun -(a: u64, b: u64): u64

#meta(negI32)
fun -(n: i32): i32

#meta(negI64)
fun -(n: i64): i64

#meta(not)
fun not(q: bool): bool

#meta(mulI32)
fun *(a: i32, b: i32): i32

#meta(mulU32)
fun *(a: u32, b: u32): u32

#meta(mulI64)
fun *(a: i64, b: i64): i64

#meta(mulU64)
fun *(a: u64, b: u64): u64

#meta(divI32)
fun /(a: i32, b: i32): i32

#meta(divU32)
fun /(a: u32, b: u32): u32

#meta(divI64)
fun /(a: i64, b: i64): i64

#meta(divU64)
fun /(a: u64, b: u64): u64

#meta(modI32)
fun mod(a: i32, b: i32): i32

#meta(modU32)
fun mod(a: u32, b: u32): u32

#meta(modI64)
fun mod(a: i64, b: i64): i64

#meta(modU64)
fun mod(a: u64, b: u64): u64

#meta(logicalAnd)
fun and (a: bool, b: bool): bool

#meta(logicalOr)
fun or (a: bool, b: bool): bool

fun nand(a: bool, b: bool): bool {
  not (a and b)
}

fun nor(a: bool, b: bool): bool {
  not (a or b)
}

fun xor(a: bool, b: bool): bool {
  (a or b) and nand(a, b)
}

fun xnor(a: bool, b: bool): bool {
  nor(a, b) or (a and b)
}

#meta(bitwiseAndI32)
fun and (a: i32, b: i32): i32

#meta(bitwiseAndU32)
fun and (a: u32, b: u32): u32

#meta(bitwiseAndI64)
fun and (a: i64, b: i64): i64

#meta(bitwiseAndU64)
fun and (a: u64, b: u64): u64

#meta(bitwiseOrI32)
fun or (a: i32, b: i32): i32

#meta(bitwiseOrU32)
fun or (a: u32, b: u32): u32

#meta(bitwiseOrI64)
fun or (a: i64, b: i64): i64

#meta(bitwiseOrU64)
fun or (a: u64, b: u64): u64

#meta(lssI32)
fun <(a: i32, b: i32): bool

#meta(lssU32)
fun <(a: u32, b: u32): bool

#meta(lssI64)
fun <(a: i64, b: i64): bool

#meta(lssU64)
fun <(a: u64, b: u64): bool

#meta(leqI32)
fun <=(a: i32, b: i32): bool

#meta(leqU32)
fun <=(a: u32, b: u32): bool

#meta(leqI64)
fun <=(a: i64, b: i64): bool

#meta(leqU64)
fun <=(a: u64, b: u64): bool

#meta(gtrI32)
fun >(a: i32, b: i32): bool

#meta(gtrU32)
fun >(a: u32, b: u32): bool

#meta(gtrI64)
fun >(a: i64, b: i64): bool

#meta(gtrU64)
fun >(a: u64, b: u64): bool

#meta(geqI32)
fun >=(a: i32, b: i32): bool

#meta(geqU32)
fun >=(a: u32, b: u32): bool

#meta(geqI64)
fun >=(a: i64, b: i64): bool

#meta(geqU64)
fun >=(a: u64, b: u64): bool

#meta(eqI32)
fun ==(a: i32, b: i32): bool

#meta(eqU32)
fun ==(a: u32, b: u32): bool

#meta(eqI64)
fun ==(a: i64, b: i64): bool

#meta(eqU64)
fun ==(a: u64, b: u64): bool

#meta(neqI32)
fun !=(a: i32, b: i32): bool

#meta(neqU32)
fun !=(a: u32, b: u32): bool

#meta(neqI64)
fun !=(a: i64, b: i64): bool

#meta(neqU64)
fun !=(a: u64, b: u64): bool

fun even(n: i32): bool {
  n and 1 == 0
}

fun odd(n: i32): bool {
  n and 1 == 1
}

fun pow(a: i32, n: i32): i32 {
  if n == 0 {
    1
  } else {
    if n.even() {
      (a * a).pow(n / 2)
    } else {
      a * (a * a).pow((n - 1) / 2)
    }
  }
}

fun main() {
  3.pow(11)
}


type Sieve = {
  primes: uint[],
  count: uint,
}

fun init(mut sieve: Sieve): void {
  sieve.primes[0] = 2
  sieve.primes[1] = 3
  sieve.count = 1
}

fun isPrime(sieve: Sieve, n: uint): bool {
  mut i = 1

  while true {
    let p = sieve.primes[i]

    if p * p > n {
      return true
    }

    if n mod p == 0 {
      return false
    }

    i += 1
  }

  true
}

fun nextPrime(mut sieve: Sieve): uint {
  mut n = sieve.primes[sieve.count] + 2
  
  while not sieve.isPrime(n) {
    n += 2
  }

  sieve.count += 1
  sieve.primes[sieve.count] = n

  n
}

fun fill(mut sieve: Sieve): void {
  let max = sieve.primes.len - 1
  while sieve.count < max {
    sieve.nextPrime()
  }
}

fun main() {
  mut sieve = Sieve {
    primes: [0; 1000000],
    count: 0,
  }

  sieve.init()
  sieve.fill()

  print(sieve.primes.last())
}
